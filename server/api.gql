schema {
  query: Query
  mutation: Mutation
}

type Query {
  node(id: ID!): Node
  viewer: Viewer
  search(first: Int, after: String, last: Int, before: String): PlayListItemConnection!
}

type Mutation {
  playAudio(input: PlayAudioInput): PlayAudioPayload
  stopAudio(input: StopAudioInput): StopAudioPayload
  reloadVideo(input: ReloadVideoInput): ReloadVideoPayload
}

scalar Date

interface Node {
  id: ID!
}

type Viewer {
  playlist: PlayList
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input PlayAudioInput {
  clientMutationId: ID!
  videoId: String!
}

type PlayAudioPayload {
  clientMutationId: ID!
  ok: Boolean
}

input StopAudioInput {
  clientMutationId: ID!
}

type StopAudioPayload {
  clientMutationId: ID!
}

# ytdl-core, videoInfo
type Video implements Node {
  id: ID!
  iv_load_policy: String
  iv_allow_in_place_switch: String
  iv_endscreen_url: String
  iv_invideo_url: String
  iv3_module: String
  rmktEnabled: String
  uid: String
  vid: String
  focEnabled: String
  baseUrl: String
  storyboard_spec: String
  serialized_ad_ux_config: String
  player_error_log_fraction: String
  sffb: String
  ldpj: String
  videostats_playback_base_url: String
  innertube_context_client_version: String
  player_response: String
  t: String
  fade_in_start_milliseconds: String!
  timestamp: String!
  ad3_module: String!
  relative_loudness: String!
  allow_below_the_player_companion: String!
  eventid: String!
  token: String!
  atc: String!
  title: String!
  cr: String!
  apply_fade_on_midrolls: String!
  cl: String!
  fexp: [String]!
  apiary_host: String!
  fade_in_duration_milliseconds: String!
  fflags: String!
  ssl: String!
  pltype: String!
  media: VideoMedia!
  author: VideoAuthor!
  enabled_engage_types: String!
  hl: String!
  is_listed: String!
  gut_tag: String!
  apiary_host_firstparty: String!
  enablecsi: String!
  csn: String!
  status: String!
  afv_ad_tag: String!
  idpj: String!
  sfw_player_response: String!
  account_playback_token: String!
  encoded_ad_safety_reason: String!
  tag_for_children_directed: String!
  no_get_video_log: String!
  ppv_remarketing_url: String!
  # fmt_list: string[][];
  ad_slots: String!
  fade_out_duration_milliseconds: String!
  instream_long: String!
  allow_html5_ads: String!
  core_dbp: String!
  ad_device: String!
  view_count: String!
  itct: String!
  root_ve_type: String!
  excluded_ads: String!
  aftv: String!
  loeid: String!
  cver: String!
  shortform: String!
  dclk: String!
  csi_page_type: String!
  ismb: String!
  gpt_migration: String!
  loudness: String!
  ad_tag: String!
  of: String!
  probe_url: String!
  vm: String!
  afv_ad_tag_restricted_to_instream: String!
  gapi_hint_params: String!
  cid: String!
  c: String!
  oid: String!
  ptchn: String!
  as_launched_in_country: String!
  avg_rating: String!
  fade_out_start_milliseconds: String!
  length_seconds: String!
  midroll_prefetch_size: String!
  allow_ratings: String!
  thumbnail_url: String!
  iurlsd: String!
  iurlmq: String!
  iurlhq: String!
  iurlmaxres: String!
  ad_preroll: String!
  tmi: String!
  keywords: [String]!
  trueview: String!
  host_language: String!
  innertube_api_key: String!
  show_content_thumbnail: String!
  afv_instream_max: String!
  innertube_api_version: String!
  mpvid: String!
  allow_embed: String!
  ucid: String!
  plid: String!
  midroll_freqcap: String!
  ad_logging_flag: String!
  ptk: String!
  vmap: String!
  watermark: [String]!
  video_id: String!
  dbp: String!
  ad_flags: String!
  html5player: String!
  dashmpd: String
  dashmpd2: String
  hlsvp: String
  # formats: videoFormat[];
  published: Int
  description: String!
  # related_videos: relatedVideo[]
  video_url: String!
  no_embed_allowed: Boolean
  age_restricted: Boolean
}

type VideoMedia {
  image: String
  category: String!
  category_url: String!
  game: String
  game_url: String
  year: Int
  song: String
  artist: String
  artist_url: String
  writers: String
  licensed_by: String
}

type VideoAuthor {
  id: String!
  name: String!
  avatar: String!
  verified: Boolean!
  user: String!
  channel_url: String!
  user_url: String!
}

input ReloadVideoInput {
  clientMutationId: ID!
  videoId: String
}

type ReloadVideoPayload {
  clientMutationId: ID!
  video: Video
}

type PlayList {
  random: PlayListItem
}

type PlayListItem implements Node {
  id: ID!
  videoId: String!
  video: Video
}

type PlayListItemConnection {
  edges: [PlayListItemEdge!]!
  pageInfo: PageInfo!
}

type PlayListItemEdge {
  cursor: String!
  node: PlayListItem!
}
